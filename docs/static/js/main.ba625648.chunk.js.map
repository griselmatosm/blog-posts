{"version":3,"sources":["services/getDataFromApi.js","actions/index.js","components/UserHeader.js","components/PostList.js","components/App.js","reducers/index.js","reducers/postsReducer.js","reducers/userReducer.js","index.js"],"names":["axios","create","baseURL","fetchPosts","dispatch","a","getData","get","response","type","payload","data","fetchUser","id","UserHeader","user","this","props","className","name","React","Component","connect","state","ownProps","users","find","userId","PostList","fetchPostsAndUsers","posts","map","post","key","title","body","renderList","getState","_","uniq","forEach","App","combineReducers","action","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAEeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,yCCiBEC,EAAa,yDAAM,WAAOC,GAAP,eAAAC,EAAA,sEACPC,EAAQC,IAAI,UADL,OACxBC,EADwB,OAE9BJ,EAAS,CAAEK,KAAM,cAAeC,QAASF,EAASG,OAFpB,2CAAN,uDAKbC,EAAY,SAACC,GAAD,8CAAQ,WAAOT,GAAP,eAAAC,EAAA,sEACRC,EAAQC,IAAR,iBAAsBM,IADd,OACzBL,EADyB,OAE/BJ,EAAS,CAAEK,KAAM,aAAcC,QAASF,EAASG,OAFlB,2CAAR,uDCrBnBG,E,uKAKM,IACAC,EAASC,KAAKC,MAAdF,KAER,OAAKA,EAIE,yBAAKG,UAAU,UAAUH,EAAKI,KAA9B,KAHE,S,GATYC,IAAMC,WAoBhBC,eAJS,SAACC,EAAOC,GAC9B,MAAO,CAAET,KAAMQ,EAAME,MAAMC,MAAK,SAACX,GAAD,OAAUA,EAAKF,KAAOW,EAASG,aAGzB,CAAEf,aAA3BU,CAAwCR,GCnBjDc,E,kLAGFZ,KAAKC,MAAMY,uB,mCAIX,OAAOb,KAAKC,MAAMa,MAAMC,KAAI,SAACC,GAC3B,OACE,yBAAKd,UAAU,OAAOe,IAAKD,EAAKnB,IAC9B,uBAAGK,UAAU,mCACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,eACb,4BAAKc,EAAKE,OACV,2BAAIF,EAAKG,OAEX,kBAAC,EAAD,CAAYR,OAAQK,EAAKL,gB,+BAQjC,OAAO,yBAAKT,UAAU,2BAA4BF,KAAKoB,kB,GAxBpChB,IAAMC,WAgCdC,eAJS,SAACC,GACvB,MAAO,CAAEO,MAAOP,EAAMO,SAGgB,CAAED,mBFhCR,yDAAM,WAAOzB,EAAUiC,GAAjB,SAAAhC,EAAA,sEAChCD,EAASD,KADuB,OAGtBmC,IAAEC,KAAKD,IAAEP,IAAIM,IAAWP,MAAO,WACvCU,SAAQ,SAAC3B,GAAD,OAAQT,EAASQ,EAAUC,OAJL,2CAAN,0DEgCnBS,CAAiDM,GC1BjDa,MARf,WACE,OACE,yBAAKvB,UAAU,gBACb,kBAAC,EAAD,Q,QCFSwB,cAAgB,CAC3BZ,MCLW,WAAyB,IAAxBP,EAAuB,uDAAf,GAAIoB,EAAW,uCACrC,OAAQA,EAAOlC,MACb,IAAK,cACH,OAAOkC,EAAOjC,QAChB,QACE,OAAOa,IDCTE,MENW,WAAyB,IAAxBF,EAAuB,uDAAf,GAAIoB,EAAW,uCACrC,OAAQA,EAAOlC,MACb,IAAK,aACH,MAAM,GAAN,mBAAWc,GAAX,CAAkBoB,EAAOjC,UAE3B,QACE,OAAOa,MCGPqB,EAAQC,YAAYC,EAAUC,YAAgBC,MAEpDC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAAC,EAAD,QAGJQ,SAASC,eAAe,W","file":"static/js/main.ba625648.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({\r\n  baseURL: 'https://jsonplaceholder.typicode.com',\r\n});\r\n","import _ from 'lodash';\r\nimport getData from '../services/getDataFromApi';\r\n\r\n//solución para evitar múltiples llamadas innecesarias por cada user\r\n\r\nexport const fetchPostsAndUsers = () => async (dispatch, getState) => {\r\n  await dispatch(fetchPosts());\r\n\r\n  const userIds = _.uniq(_.map(getState().posts, 'userId'));\r\n  userIds.forEach((id) => dispatch(fetchUser(id)));\r\n\r\n  //_.map creates an array of values by running each element in collection thru iteratee\r\n\r\n  // _.uniq creates a duplicate-free version of an array, using SameValueZero for equality comparisons,\r\n  //in which only the first occurrence of each element is kept.\r\n  //The order of result values is determined by the order they occur in the array.\r\n};\r\n\r\n//al usar redux-thunk en action creators asíncronos la función del fetch retorna otra función que recibe\r\n//como parámatros dispatch como primero y getState como segundo (en este caso no necesitamos el estado)\r\nexport const fetchPosts = () => async (dispatch) => {\r\n  const response = await getData.get('/posts');\r\n  dispatch({ type: 'FETCH_POSTS', payload: response.data });\r\n};\r\n\r\nexport const fetchUser = (id) => async (dispatch) => {\r\n  const response = await getData.get(`/users/${id}`);\r\n  dispatch({ type: 'FETCH_USER', payload: response.data });\r\n};\r\n\r\n//otra solución\r\n\r\n//la función memoize de la librería lodash  permite que una función\r\n//pura cuente con un mecanismo en el que pueda recordar valores ya\r\n//computados para ahorrar recursos y tiempos.\r\n//La idea es envolver una función en un mecanismo de caché, sin que\r\n//el comportamiento de dicha función se vea alterado.\r\n\r\n//de esta manera evitamos que se realicen peticiones innecesarias cada vez\r\n//que el id sea el mismo, es decir, realiza la petición una vez, para cada\r\n//id diferente y cuando detecta que hay un id que matchea devuelve el mismo resultado\r\n//pues recuerda los valores retornados cuando el  id coincide\r\n\r\n// export const fetchUser = (id) => (dispatch) => _fetchUser(id, dispatch);\r\n\r\n// const _fetchUser = _.memoize(async (id, dispatch) => { //se suele poner _ delante del nombre de la función para indicar que es privada\r\n//   const response = await getData.get(`/users/${id}`);\r\n//   dispatch({ type: 'FETCH_USER', payload: response.data });\r\n// });\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchUser } from '../actions';\r\n\r\nclass UserHeader extends React.Component {\r\n//   componentDidMount() {\r\n//     this.props.fetchUser(this.props.userId);\r\n//   }\r\n\r\n  render() {\r\n    const { user } = this.props;\r\n\r\n    if (!user) {\r\n      return null;\r\n    }\r\n\r\n    return <div className=\"header\">{user.name} </div>;\r\n  }\r\n}\r\n// ownProps es una referencia de las props que se reciben dentro del componente de clase\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return { user: state.users.find((user) => user.id === ownProps.userId) };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchUser })(UserHeader);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchPostsAndUsers } from '../actions';\r\nimport UserHeader from './UserHeader';\r\n\r\nclass PostList extends React.Component {\r\n  componentDidMount() {\r\n    // this.props.fetchPosts(); //solución con memoize\r\n    this.props.fetchPostsAndUsers(); //solución con action creator inside action creator\r\n  }\r\n\r\n  renderList() {\r\n    return this.props.posts.map((post) => {\r\n      return (\r\n        <div className=\"item\" key={post.id}>\r\n          <i className=\"large middle aligned icon user\" />\r\n          <div className=\"content\">\r\n            <div className=\"description\">\r\n              <h2>{post.title}</h2>\r\n              <p>{post.body}</p>\r\n            </div>\r\n            <UserHeader userId={post.userId} />\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"ui relaxed divided list\">{ this.renderList() }</div>;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { posts: state.posts };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchPostsAndUsers })(PostList);\r\n","import React from 'react';\nimport PostList from './PostList';\n\nfunction App() {\n  return (\n    <div className=\"ui container\">\n      <PostList />\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport postsReducer from './postsReducer';\r\nimport userReducer from './userReducer';\r\n\r\nexport default combineReducers({\r\n    posts: postsReducer,\r\n    users: userReducer\r\n});","export default (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'FETCH_POSTS':\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export default (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'FETCH_USER':\r\n      return [...state, action.payload];\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}